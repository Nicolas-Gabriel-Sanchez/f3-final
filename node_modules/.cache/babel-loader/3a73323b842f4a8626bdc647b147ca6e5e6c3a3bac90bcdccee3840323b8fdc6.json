{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nicol\\\\Desktop\\\\poroyecto\\\\fe3-final-main (1)\\\\fe3-final-main\\\\src\\\\Components\\\\utils\\\\global.context.jsx\";\nimport { createContext, useReducer, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const initialState = {\n  theme: \"\",\n  data: []\n};\nexport const ContextGlobal = /*#__PURE__*/createContext(undefined);\n\n// const usersReducer = (state=initialState,action) =>{\n//   switch (action.type) {\n//     case \"SAVE_USERS\":\n//       return {...state,data:action.data}\n\n//     case \"CHANGE_THEME\":\n//       console.log(state);\n//       return {...state,theme:state.theme == \"light\" ? \"dark\": \"light\"}\n\n//     default:\n//       break;\n//   }\n\n// }\n\nexport const ContextProvider = _ref => {\n  let {\n    children\n  } = _ref;\n  //Aqui deberan implementar la logica propia del Context, utilizando el hook useMemo\n\n  // const [globalState, setGlobalState] = useState(initialState)\n\n  // const [state, dispatch] = useReducer(usersReducer, initialState)\n\n  return /*#__PURE__*/_jsxDEV(ContextGlobal.Provider, {\n    value: {},\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_c = ContextProvider;\nvar _c;\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"names":["createContext","useReducer","useState","jsxDEV","_jsxDEV","initialState","theme","data","ContextGlobal","undefined","ContextProvider","_ref","children","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/nicol/Desktop/poroyecto/fe3-final-main (1)/fe3-final-main/src/Components/utils/global.context.jsx"],"sourcesContent":["import { createContext, useReducer, useState } from \"react\";\n\nexport const initialState = {theme: \"\", data: []}\n\nexport const ContextGlobal = createContext(undefined);\n\n// const usersReducer = (state=initialState,action) =>{\n//   switch (action.type) {\n//     case \"SAVE_USERS\":\n//       return {...state,data:action.data}\n      \n//     case \"CHANGE_THEME\":\n//       console.log(state);\n//       return {...state,theme:state.theme == \"light\" ? \"dark\": \"light\"}\n  \n//     default:\n//       break;\n//   }\n\n// }\n\nexport const ContextProvider = ({ children }) => {\n  //Aqui deberan implementar la logica propia del Context, utilizando el hook useMemo\n\n  // const [globalState, setGlobalState] = useState(initialState)\n\n  // const [state, dispatch] = useReducer(usersReducer, initialState)\n\n  return (\n    <ContextGlobal.Provider value={{}}>\n      {children}\n    </ContextGlobal.Provider>\n  );\n};\n"],"mappings":";AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5D,OAAO,MAAMC,YAAY,GAAG;EAACC,KAAK,EAAE,EAAE;EAAEC,IAAI,EAAE;AAAE,CAAC;AAEjD,OAAO,MAAMC,aAAa,gBAAGR,aAAa,CAACS,SAAS,CAAC;;AAErD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,OAAO,MAAMC,eAAe,GAAGC,IAAA,IAAkB;EAAA,IAAjB;IAAEC;EAAS,CAAC,GAAAD,IAAA;EAC1C;;EAEA;;EAEA;;EAEA,oBACEP,OAAA,CAACI,aAAa,CAACK,QAAQ;IAACC,KAAK,EAAE,CAAC,CAAE;IAAAF,QAAA,EAC/BA;EAAQ;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACa,CAAC;AAE7B,CAAC;AAACC,EAAA,GAZWT,eAAe;AAAA,IAAAS,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}