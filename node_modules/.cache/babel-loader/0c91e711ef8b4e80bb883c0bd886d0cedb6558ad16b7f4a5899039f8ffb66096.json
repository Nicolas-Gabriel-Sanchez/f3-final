{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nicol\\\\Desktop\\\\poroyecto\\\\fe3-final-main (1)\\\\fe3-final-main\\\\src\\\\Components\\\\utils\\\\global.context.jsx\",\n  _s = $RefreshSig$();\nimport { createContext, useReducer, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const initialState = {\n  theme: \"\",\n  data: []\n};\nexport const ContextGlobal = /*#__PURE__*/createContext();\n\n// const usersReducer = (state=initialState,action) =>{\n//   switch (action.type) {\n//     case \"SAVE_USERS\":\n//       return {...state,data:action.data}\n\n//     case \"CHANGE_THEME\":\n//       console.log(state);\n//       return {...state,theme:state.theme == \"light\" ? \"dark\": \"light\"}\n\n//     default:\n//       break;\n//   }\n\n// }\n\nexport const ContextProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  //Aqui deberan implementar la logica propia del Context, utilizando el hook useMemo\n\n  const [globalState, setGlobalState] = useState(initialState);\n  const [state, dispatch] = useReducer(usersReducer, initialState);\n  return /*#__PURE__*/_jsxDEV(ContextGlobal.Provider, {\n    value: {\n      globalState,\n      state,\n      dispatch\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_s(ContextProvider, \"QpTJsAPBBBXvdZvu130n475K+vE=\");\n_c = ContextProvider;\nvar _c;\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"names":["createContext","useReducer","useState","jsxDEV","_jsxDEV","initialState","theme","data","ContextGlobal","ContextProvider","_ref","_s","children","globalState","setGlobalState","state","dispatch","usersReducer","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/nicol/Desktop/poroyecto/fe3-final-main (1)/fe3-final-main/src/Components/utils/global.context.jsx"],"sourcesContent":["import { createContext, useReducer, useState } from \"react\";\n\nexport const initialState = {theme: \"\", data: []}\n\nexport const ContextGlobal = createContext();\n\n// const usersReducer = (state=initialState,action) =>{\n//   switch (action.type) {\n//     case \"SAVE_USERS\":\n//       return {...state,data:action.data}\n      \n//     case \"CHANGE_THEME\":\n//       console.log(state);\n//       return {...state,theme:state.theme == \"light\" ? \"dark\": \"light\"}\n  \n//     default:\n//       break;\n//   }\n\n// }\n\nexport const ContextProvider = ({ children }) => {\n  //Aqui deberan implementar la logica propia del Context, utilizando el hook useMemo\n\n  const [globalState, setGlobalState] = useState(initialState)\n\n  const [state, dispatch] = useReducer(usersReducer, initialState)\n\n  return (\n    <ContextGlobal.Provider value={{globalState, state, dispatch}}>\n      {children}\n    </ContextGlobal.Provider>\n  );\n};\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5D,OAAO,MAAMC,YAAY,GAAG;EAACC,KAAK,EAAE,EAAE;EAAEC,IAAI,EAAE;AAAE,CAAC;AAEjD,OAAO,MAAMC,aAAa,gBAAGR,aAAa,CAAC,CAAC;;AAE5C;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,OAAO,MAAMS,eAAe,GAAGC,IAAA,IAAkB;EAAAC,EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC,GAAAF,IAAA;EAC1C;;EAEA,MAAM,CAACG,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAACG,YAAY,CAAC;EAE5D,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGf,UAAU,CAACgB,YAAY,EAAEZ,YAAY,CAAC;EAEhE,oBACED,OAAA,CAACI,aAAa,CAACU,QAAQ;IAACC,KAAK,EAAE;MAACN,WAAW;MAAEE,KAAK;MAAEC;IAAQ,CAAE;IAAAJ,QAAA,EAC3DA;EAAQ;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACa,CAAC;AAE7B,CAAC;AAACZ,EAAA,CAZWF,eAAe;AAAAe,EAAA,GAAff,eAAe;AAAA,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}